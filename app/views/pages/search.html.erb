<%= render 'partial/navbar' %>
<div class="container">
   <div class="row">
      <div class="col-md-12">
         <div class="row">
      			<div class="page-header col-md-8">
      				<h4>地図検索</h4>
      			</div>
		     </div>
        <div class="col-md-12">
          <div id="map" style="height: 500px;"></div>
        </div>
       <!-- 検索フォーム -->
        <section class="search-form">
         	   <table class="table table-bordered">
               	<tbody>
               		<tr>
                 			<th class="col-md-3"> キーワード</th>
                 			<td td class="col-md-9 form-inline">
                 			   <%= text_field_tag :search, params[:search], placeholder: "Where are you going?", class: "form-control controls",id:"pac-input" %>
                 			</td>
               		</tr>
               	</tbody>
            </table>
            <div class="row">
            	  <button class="btn btn-warning  btn-lg active btn-search col-md-5 col-sm-7 col-xs-10">検索する</button>
            </div>
        </section>
         <!-- end search-form -->
      </div>
   </div>
</div>
<%= render 'partial/footer' %>
<script>
function initMap() {
        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: -33.8688, lng: 151.2195},
          zoom: 13
        });
        var input = /** @type {!HTMLInputElement} */(
            document.getElementById('pac-input'));

        var types = document.getElementById('type-selector');
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);

        // マーカーとwindowの配列を用意
        markers = [];
        infowindow = [];
        
        <% @jobs.each do |job| %>
        
        // markerはこの関数の中で同じ変数
        var marker = new google.maps.Marker({
          position: new google.maps.LatLng(<%= job.latitude %>, <%= job.longitude %>),
          map: map
        });
        
        // マーカー配列にマーカーを保存
        markers.push(marker);
        
        <% end %>
        
        // var infowindow = new google.maps.InfoWindow();
        // var marker = new google.maps.Marker({
        //   map: map,
        //   anchorPoint: new google.maps.Point(0, -29)
        // });

        // autocomplete.addListener('place_changed', function() {
        //   infowindow.close();
        //   marker.setVisible(false);
        //   var place = autocomplete.getPlace();
        //   if (!place.geometry) {
        //     // User entered the name of a Place that was not suggested and
        //     // pressed the Enter key, or the Place Details request failed.
        //     window.alert("No details available for input: '" + place.name + "'");
        //     return;
        //   }

        //   // If the place has a geometry, then present it on a map.
        //   if (place.geometry.viewport) {
        //     map.fitBounds(place.geometry.viewport);
        //   } else {
        //     map.setCenter(place.geometry.location);
        //     map.setZoom(17);  // Why 17? Because it looks good.
        //   }
        //   marker.setIcon(/** @type {google.maps.Icon} */({
        //     url: place.icon,
        //     size: new google.maps.Size(71, 71),
        //     origin: new google.maps.Point(0, 0),
        //     anchor: new google.maps.Point(17, 34),
        //     scaledSize: new google.maps.Size(35, 35)
        //   }));
        //   marker.setPosition(place.geometry.location);
        //   marker.setVisible(true);

        //   var address = '';
        //   if (place.address_components) {
        //     address = [
        //       (place.address_components[0] && place.address_components[0].short_name || ''),
        //       (place.address_components[1] && place.address_components[1].short_name || ''),
        //       (place.address_components[2] && place.address_components[2].short_name || '')
        //     ].join(' ');
        //   }

        //   infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
        //   infowindow.open(map, marker);
        // });

        // Sets a listener on a radio button to change the filter type on Places
        // Autocomplete.
        function setupClickListener(id, types) {
          var radioButton = document.getElementById(id);
          radioButton.addEventListener('click', function() {
            autocomplete.setTypes(types);
          });
        }

        setupClickListener('changetype-all', []);
        setupClickListener('changetype-address', ['address']);
        setupClickListener('changetype-establishment', ['establishment']);
        setupClickListener('changetype-geocode', ['geocode']);
      }

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBYa7BUZC8vDfbqree2TYehmkX6S8r2ugk&signed_in=true&libraries=places&callback=initMap"
        async defer></script>